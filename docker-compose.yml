version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: optimizador_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-optimizador_rutas}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - optimizador_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OSRM Backend
  osrm:
    image: osrm/osrm-backend:latest
    container_name: optimizador_osrm
    ports:
      - "5000:5000"
    volumes:
      - ./osrm-data:/data
    command: osrm-routed --algorithm mld /data/argentina-latest.osrm
    networks:
      - optimizador_network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: optimizador_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - optimizador_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API (for production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: optimizador_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-optimizador_rutas}
      - OSRM_URL=http://osrm:5000
      - REDIS_URL=redis://redis:6379
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    networks:
      - optimizador_network
    depends_on:
      postgres:
        condition: service_healthy
      osrm:
        condition: service_healthy
    profiles:
      - production

  # Frontend (for production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: optimizador_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_MAPBOX_TOKEN=${MAPBOX_ACCESS_TOKEN}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - optimizador_network
    depends_on:
      - backend
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  optimizador_network:
    driver: bridge